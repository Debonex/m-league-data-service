//! SeaORM Entity. Generated by sea-orm-codegen 0.7.0

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize)]
#[sea_orm(table_name = "season")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub season_year_id: Option<i32>,
    pub season_name: Option<String>,
    pub season_type: Option<String>,
    pub season_code: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::season_year::Entity",
        from = "Column::SeasonYearId",
        to = "super::season_year::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SeasonYear,
    #[sea_orm(has_many = "super::season_pro::Entity")]
    SeasonPro,
}

impl Related<super::season_year::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SeasonYear.def()
    }
}

impl Related<super::season_pro::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SeasonPro.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
