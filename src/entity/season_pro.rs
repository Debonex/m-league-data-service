//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize)]
#[sea_orm(table_name = "season_pro")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub season_id: Option<i32>,
    pub pro_id: Option<i32>,
    pub team_id: Option<i32>,
    pub game_num: i32,
    pub game_east_start_num: i32,
    pub game_south_start_num: i32,
    pub game_west_start_num: i32,
    pub game_north_start_num: i32,
    pub game_highest_score: Option<i32>,
    pub game_lowest_score: Option<i32>,
    pub first_east_num: i32,
    pub first_south_num: i32,
    pub first_west_num: i32,
    pub first_north_num: i32,
    pub second_east_num: i32,
    pub second_south_num: i32,
    pub second_west_num: i32,
    pub second_north_num: i32,
    pub third_east_num: i32,
    pub third_south_num: i32,
    pub third_west_num: i32,
    pub third_north_num: i32,
    pub fourth_east_num: i32,
    pub fourth_south_num: i32,
    pub fourth_west_num: i32,
    pub fourth_north_num: i32,
    pub first_score: i32,
    pub second_score: i32,
    pub third_score: i32,
    pub fourth_score: i32,
    pub score_point: Decimal,
    pub rank_point: Decimal,
    pub kyoku_east_num: i32,
    pub kyoku_south_num: i32,
    pub kyoku_west_num: i32,
    pub kyoku_north_num: i32,
    pub shanten_num: i32,
    pub haipai_dora_num: i32,
    pub renchan_max_num: i32,
    pub furo_num: i32,
    pub richi_num: i32,
    pub richi_first_num: i32,
    pub richi_chase_num: i32,
    pub richi_good_num: i32,
    pub richi_stupid_num: i32,
    pub richi_machi_num: i32,
    pub richi_turn_num: i32,
    pub richi_suji_num: i32,
    pub richi_furiten_num: i32,
    pub richi_dora_num: i32,
    pub richi_han_num: i32,
    pub richi_aka_num: i32,
    pub richi_chased_num: i32,
    pub ryukyoku_tenpai_richi_num: i32,
    pub ryukyoku_tenpai_menzen_num: i32,
    pub ryukyoku_tenpai_furo_num: i32,
    pub ryukyoku_noten_richi_num: i32,
    pub ryukyoku_noten_menzen_num: i32,
    pub ryukyoku_noten_furo_num: i32,
    pub agari_dama_ron_num: i32,
    pub agari_dama_tsumo_num: i32,
    pub agari_dama_score: i32,
    pub agari_richi_ron_num: i32,
    pub agari_richi_tsumo_num: i32,
    pub agari_richi_score: i32,
    pub agari_richi_ron_ippatsu_num: i32,
    pub agari_richi_tsumo_ippatsu_num: i32,
    pub agari_richi_ron_uradora_kyoku_num: i32,
    pub agari_richi_tsumo_uradora_kyoku_num: i32,
    pub agari_furo_ron_num: i32,
    pub agari_furo_tsumo_num: i32,
    pub agari_furo_score: i32,
    pub agari_turn_num: i32,
    pub houjuu_dama_menzen_num: i32,
    pub houjuu_dama_furo_num: i32,
    pub houjuu_dama_richi_num: i32,
    pub houjuu_dama_score: i32,
    pub houjuu_richi_menzen_num: i32,
    pub houjuu_richi_furo_num: i32,
    pub houjuu_richi_richi_num: i32,
    pub houjuu_richi_score: i32,
    pub houjuu_richi_ippatsu_num: i32,
    pub houjuu_furo_menzen_num: i32,
    pub houjuu_furo_furo_num: i32,
    pub houjuu_furo_richi_num: i32,
    pub houjuu_furo_score: i32,
    pub blown_num: i32,
    pub blown_score: i32,
    pub yaku: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::team::Entity",
        from = "Column::TeamId",
        to = "super::team::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Team,
    #[sea_orm(
        belongs_to = "super::pro::Entity",
        from = "Column::ProId",
        to = "super::pro::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Pro,
    #[sea_orm(
        belongs_to = "super::season::Entity",
        from = "Column::SeasonId",
        to = "super::season::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Season,
}

impl Related<super::team::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Team.def()
    }
}

impl Related<super::pro::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Pro.def()
    }
}

impl Related<super::season::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Season.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
